{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-18T21:01:26.591316Z","iopub.execute_input":"2024-11-18T21:01:26.591703Z","iopub.status.idle":"2024-11-18T21:01:27.499728Z","shell.execute_reply.started":"2024-11-18T21:01:26.591664Z","shell.execute_reply":"2024-11-18T21:01:27.498611Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#following tutorial by krish naik link : https://www.youtube.com/watch?v=ioN1jcWxbv8&list=PLZoTAELRMXVPQyArDHyQVjQxjj_YmEuO9&index=1&t=319s\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns \npd.pandas.set_option('display.max_columns',None)","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:27.501870Z","iopub.execute_input":"2024-11-18T21:01:27.502337Z","iopub.status.idle":"2024-11-18T21:01:29.089606Z","shell.execute_reply.started":"2024-11-18T21:01:27.502302Z","shell.execute_reply":"2024-11-18T21:01:29.088711Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data=pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv')\ntest_data=pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:29.090966Z","iopub.execute_input":"2024-11-18T21:01:29.091529Z","iopub.status.idle":"2024-11-18T21:01:29.169902Z","shell.execute_reply.started":"2024-11-18T21:01:29.091482Z","shell.execute_reply":"2024-11-18T21:01:29.168732Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:29.172894Z","iopub.execute_input":"2024-11-18T21:01:29.173259Z","iopub.status.idle":"2024-11-18T21:01:29.227953Z","shell.execute_reply.started":"2024-11-18T21:01:29.173212Z","shell.execute_reply":"2024-11-18T21:01:29.226661Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:29.229228Z","iopub.execute_input":"2024-11-18T21:01:29.229545Z","iopub.status.idle":"2024-11-18T21:01:29.236927Z","shell.execute_reply.started":"2024-11-18T21:01:29.229513Z","shell.execute_reply":"2024-11-18T21:01:29.235706Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Step 1 : Data Analysis**","metadata":{}},{"cell_type":"code","source":"#finding missing values\n#making list of features from dataset which has nan value present\nfeatures_with_na=[features for features in train_data.columns if train_data[features].isnull().sum()>1]\n\n#printing out feature name with % of missing values\nfor feature in features_with_na:\n    print(feature, np.round(train_data[feature].isnull().mean(), 4),  ' % missing values')","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:29.238573Z","iopub.execute_input":"2024-11-18T21:01:29.239458Z","iopub.status.idle":"2024-11-18T21:01:29.281417Z","shell.execute_reply.started":"2024-11-18T21:01:29.239404Z","shell.execute_reply":"2024-11-18T21:01:29.280201Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#check if missing values have significant impact on our dependent variable(sales price) \nfor feature in features_with_na:\n    data=train_data.copy()\n    \n    #we are making a variable where if value is missing it  is set to 1 or it's 0 otherwise\n    data[feature]=np.where(data[feature].isnull(),1,0)\n    \n    # let's calculate the mean SalePrice where the information is missing or present\n    data.groupby(feature)['SalePrice'].median().plot.bar(color=['lightblue','orange'])\n    plt.title(feature)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:29.282851Z","iopub.execute_input":"2024-11-18T21:01:29.283271Z","iopub.status.idle":"2024-11-18T21:01:33.284377Z","shell.execute_reply.started":"2024-11-18T21:01:29.283227Z","shell.execute_reply":"2024-11-18T21:01:33.283173Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Here the relation between missing values and dependent variable is visible.","metadata":{}},{"cell_type":"markdown","source":"## Numerical Variables","metadata":{}},{"cell_type":"code","source":"##step 2 is looking for numerical features in dataset\nnumerical_features=[features for features in train_data.columns if train_data[features].dtype!= 'O']\n#check if data type isn't equal to object\nprint('Number of numerical features:', len(numerical_features))\n\ntrain_data[numerical_features].head()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:33.285831Z","iopub.execute_input":"2024-11-18T21:01:33.286171Z","iopub.status.idle":"2024-11-18T21:01:33.312551Z","shell.execute_reply.started":"2024-11-18T21:01:33.286135Z","shell.execute_reply":"2024-11-18T21:01:33.311412Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Temporal variables(eg Datetime variables)\nWe have to check for them ","metadata":{}},{"cell_type":"code","source":"#finding year from the dataset\nyear_feature=[feature for feature in numerical_features if 'Yr' in feature or 'Year' in feature]\nyear_feature","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:33.314096Z","iopub.execute_input":"2024-11-18T21:01:33.314537Z","iopub.status.idle":"2024-11-18T21:01:33.325406Z","shell.execute_reply.started":"2024-11-18T21:01:33.314489Z","shell.execute_reply":"2024-11-18T21:01:33.324318Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for feature in year_feature:\n    print(feature, train_data[feature].unique())","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:33.328977Z","iopub.execute_input":"2024-11-18T21:01:33.329377Z","iopub.status.idle":"2024-11-18T21:01:33.339049Z","shell.execute_reply.started":"2024-11-18T21:01:33.329340Z","shell.execute_reply":"2024-11-18T21:01:33.337623Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#try to find out relationship between year sold and sales price\ntrain_data.groupby('YrSold')['SalePrice'].median().plot()\nplt.xlabel('Year Sold')\nplt.ylabel('Median of House Price')\nplt.title('House price v/s Year sold ')","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:33.340428Z","iopub.execute_input":"2024-11-18T21:01:33.340782Z","iopub.status.idle":"2024-11-18T21:01:33.609377Z","shell.execute_reply.started":"2024-11-18T21:01:33.340723Z","shell.execute_reply":"2024-11-18T21:01:33.608160Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#price is decreasing with year sold doesn't fit right so we try to understand relationship between \n#other year feature and price\n\n#here we will compare all year feature with Saleprice\nfor feature in year_feature:\n    if feature !='YrSold':\n        data=train_data.copy()\n        #finding difference between year sold and other variable(eg )\n        data[feature]=data['YrSold']-data[feature]\n        \n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:33.610919Z","iopub.execute_input":"2024-11-18T21:01:33.611269Z","iopub.status.idle":"2024-11-18T21:01:34.285047Z","shell.execute_reply.started":"2024-11-18T21:01:33.611233Z","shell.execute_reply":"2024-11-18T21:01:34.283854Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#numerical variables can be divided into 2 categories Continuous and Discrete\n#finding discrete variables\n\ndiscrete_features=[feature for feature in numerical_features if len(train_data[feature].unique())<25 and feature not in year_feature+['Id']]\nprint('Discrete features count {}'.format(len(discrete_features)))\ndiscrete_features","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:34.286554Z","iopub.execute_input":"2024-11-18T21:01:34.287056Z","iopub.status.idle":"2024-11-18T21:01:34.302418Z","shell.execute_reply.started":"2024-11-18T21:01:34.287002Z","shell.execute_reply":"2024-11-18T21:01:34.301248Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data[discrete_features].head()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:34.303589Z","iopub.execute_input":"2024-11-18T21:01:34.304014Z","iopub.status.idle":"2024-11-18T21:01:34.321851Z","shell.execute_reply.started":"2024-11-18T21:01:34.303970Z","shell.execute_reply":"2024-11-18T21:01:34.320772Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#plt.style.use('seaborn') changes matplotlib's default style to seaborn\n#plt.rcdefaults() to reset style to matplotlib\n#lets find relationship between them and sales price\nfor feature in discrete_features:\n    data=train_data.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    #sns.barplot(x=feature,y='SalePrice',data=data,estimator=np.median,palette='viridis')\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:34.323137Z","iopub.execute_input":"2024-11-18T21:01:34.323447Z","iopub.status.idle":"2024-11-18T21:01:38.604607Z","shell.execute_reply.started":"2024-11-18T21:01:34.323416Z","shell.execute_reply":"2024-11-18T21:01:38.603540Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"There is a relationship between ","metadata":{}},{"cell_type":"code","source":"#calculating continuous variables\ncontinuous_features=[feature for feature in numerical_features if feature not in discrete_features+year_feature+['Id']]\nprint('Continuous features count {}'.format(len(continuous_features)))\ncontinuous_features","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:38.606156Z","iopub.execute_input":"2024-11-18T21:01:38.606521Z","iopub.status.idle":"2024-11-18T21:01:38.615215Z","shell.execute_reply.started":"2024-11-18T21:01:38.606486Z","shell.execute_reply":"2024-11-18T21:01:38.614072Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for feature in continuous_features:\n    data=train_data.copy()\n    data[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:01:38.616620Z","iopub.execute_input":"2024-11-18T21:01:38.617126Z","iopub.status.idle":"2024-11-18T21:01:42.113677Z","shell.execute_reply.started":"2024-11-18T21:01:38.617091Z","shell.execute_reply":"2024-11-18T21:01:42.112569Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Data appears skewed it should be gausian distribution or normal distribution, so we have to perform transformations.","metadata":{}},{"cell_type":"code","source":"#log transformation- feature engineering\nfor feature in continuous_features:\n    data=train_data.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data['SalePrice']=np.log(data['SalePrice'])\n        plt.scatter(data[feature],data['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalePrice')\n        plt.title(feature)\n        plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:16:10.339155Z","iopub.execute_input":"2024-11-18T21:16:10.339735Z","iopub.status.idle":"2024-11-18T21:16:11.592884Z","shell.execute_reply.started":"2024-11-18T21:16:10.339684Z","shell.execute_reply":"2024-11-18T21:16:11.591451Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"we can see monotonic relationship(i.e increase with sales price)(+ve coorelation)\n## Outlier detection","metadata":{}},{"cell_type":"code","source":"for feature in continuous_features:\n    data=train_data.copy()\n    if 0 in data[feature].unique():\n        pass\n    else:\n        data[feature]=np.log(data[feature])\n        data.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()\n        ","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:26:49.668216Z","iopub.execute_input":"2024-11-18T21:26:49.668581Z","iopub.status.idle":"2024-11-18T21:26:50.680804Z","shell.execute_reply.started":"2024-11-18T21:26:49.668550Z","shell.execute_reply":"2024-11-18T21:26:50.679699Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"There are lot of outliers present in data","metadata":{}},{"cell_type":"markdown","source":"## Categorical Variables","metadata":{}},{"cell_type":"code","source":"#Categorical Variables\ncategorical_features=[feature for feature in train_data.columns if data[feature].dtype=='O']\ncategorical_features","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:29:56.483360Z","iopub.execute_input":"2024-11-18T21:29:56.483799Z","iopub.status.idle":"2024-11-18T21:29:56.492329Z","shell.execute_reply.started":"2024-11-18T21:29:56.483711Z","shell.execute_reply":"2024-11-18T21:29:56.491131Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for feature in categorical_features:\n    print('The feature is {} and number of categories are {}'.format(feature, len(data[feature].unique())))","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:34:52.884817Z","iopub.execute_input":"2024-11-18T21:34:52.885243Z","iopub.status.idle":"2024-11-18T21:34:52.900537Z","shell.execute_reply.started":"2024-11-18T21:34:52.885207Z","shell.execute_reply":"2024-11-18T21:34:52.899448Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#finding out relation between categorical variable and dependent variable\nfor feature in categorical_features:\n    data=train_data.copy()\n    data.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-11-18T21:48:21.547635Z","iopub.execute_input":"2024-11-18T21:48:21.548489Z","iopub.status.idle":"2024-11-18T21:48:29.868169Z","shell.execute_reply.started":"2024-11-18T21:48:21.548431Z","shell.execute_reply":"2024-11-18T21:48:29.867031Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Step 2 :  Feature Engineering","metadata":{}},{"cell_type":"code","source":"# we need to do train test split first to avoid data leakage before feature engineering\n#always perform feature engineering on test too \n","metadata":{},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Missing Values","metadata":{}},{"cell_type":"code","source":"#finding nan values in categorical values\nfeatures_nan=[feature for feature in train_data.columns if train_data[feature].isnull().sum()>1 and train_data[feature].dtype=='O']\nfor feature in features_nan:\n    print(\"{}: {}% missing values\".format(feature,np.round(train_data[feature].isnull().mean(),4)))","metadata":{"execution":{"iopub.status.busy":"2024-11-18T22:02:11.721000Z","iopub.execute_input":"2024-11-18T22:02:11.721406Z","iopub.status.idle":"2024-11-18T22:02:11.747155Z","shell.execute_reply.started":"2024-11-18T22:02:11.721372Z","shell.execute_reply":"2024-11-18T22:02:11.746023Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null}]}